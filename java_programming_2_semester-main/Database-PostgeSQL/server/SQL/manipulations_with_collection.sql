-- REMOVE BY ID
DELETE
FROM PRODUCT
WHERE ID = ?;

-- CREATE PRODUCT QUERY
WITH PRODUCT_COORDINATES AS (
    -- CREATING COORDINATES
    INSERT INTO COORDINATES (X, Y)
        VALUES (?, ?)
        RETURNING COORDINATES.ID),
     -- CREATING ADDRESS FOR ORGANIZATION
     ORGANIZATION_ADDRESS AS (
         INSERT INTO ADDRESS (STREET, ZIP_CODE)
             VALUES (?, ?)
             RETURNING ADDRESS.ID),
     -- CREATING ORGANIZATION FOR PRODUCT
     CREATED_ORGANIZATION AS (
         INSERT INTO ORGANIZATION
             (NAME,
              ANNUAL_TURNOVER,
              ORGANIZATION_TYPE_ID,
              ADDRESS_ID)
             VALUES (?,
                     ?,
                     (SELECT ID
                      FROM ORGANIZATION_TYPE
                      WHERE ORGANIZATION_TYPE.NAME = ?),
                     (SELECT ID ORGANIZATION_ADDRESS))
             RETURNING ORGANIZATION.ID)
INSERT
-- CREATING PRODUCT
INTO PRODUCT (NAME,
              COORDINATES_ID,
              CREATION_DATE,
              PRICE,
              UNIT_OF_MEASURE_ID,
              MANUFACTURER, CREATOR_ID)
VALUES (?,
        (SELECT ID FROM PRODUCT_COORDINATES),
        ?,
        ?,
        (SELECT ID
         FROM UNIT_OF_MEASURE
         WHERE UNIT_OF_MEASURE.NAME = ?),
        (SELECT ID FROM CREATED_ORGANIZATION),
        ?)
RETURNING PRODUCT.ID;

-- FUNCTION THAT DOES UPDATE; IT IS USED TO DO UPDATE AS A TRANSACTION
--- SO THERE IS NO NEED TO ANYTHING ON THE SERVER SIDE
CREATE FUNCTION UPDATE_PRODUCT(
    PRODUCT_ID INTEGER,
    COORDINATES_X DOUBLE PRECISION,
    COORDINATES_Y DOUBLE PRECISION,
    ADDRESS_STREET VARCHAR(256),
    ADDRESS_ZIP_CODE VARCHAR(32),
    ORGANIZATION_NAME VARCHAR(256),
    ORGANIZATION_ANNUAL_TURNOVER DOUBLE PRECISION,
    ORGANIZATION_TYPE_NAME VARCHAR(32),
    PRODUCT_NAME VARCHAR(128),
    PRODUCT_PRICE REAL,
    PRODUCT_UNIT_OF_MEASURE_NAME VARCHAR(32))
    RETURNS INTEGER
    LANGUAGE plpgsql
AS
$$
DECLARE
    P_COORDINATES_ID       INTEGER;
    O_ADDRESS_ID           INTEGER;
    P_ORGANIZATION_ID      INTEGER;
    O_ORGANIZATION_TYPE_ID INTEGER;
    P_UNIT_OF_MEASURE_ID   INTEGER;
BEGIN
    -- IN GENERAL, THERE IS NO NEED IN LIMIT 1, BUT IT IS USED TO BE ON THE SAFE SIDE
    SELECT PRODUCT.MANUFACTURER
    INTO P_ORGANIZATION_ID
    FROM PRODUCT
    WHERE PRODUCT.ID = PRODUCT_ID
    LIMIT 1;

    SELECT PRODUCT.COORDINATES_ID
    INTO P_COORDINATES_ID
    FROM PRODUCT
    WHERE PRODUCT.ID = PRODUCT_ID
    LIMIT 1;

    SELECT ORGANIZATION.ADDRESS_ID
    INTO O_ADDRESS_ID
    FROM ORGANIZATION
    WHERE ORGANIZATION.ID = P_ORGANIZATION_ID
    LIMIT 1;

    SELECT ORGANIZATION_TYPE.ID
    INTO O_ORGANIZATION_TYPE_ID
    FROM ORGANIZATION_TYPE
    WHERE ORGANIZATION_TYPE.NAME = ORGANIZATION_TYPE_NAME
    LIMIT 1;

    SELECT UNIT_OF_MEASURE.ID
    INTO P_UNIT_OF_MEASURE_ID
    FROM UNIT_OF_MEASURE
    WHERE UNIT_OF_MEASURE.NAME = PRODUCT_UNIT_OF_MEASURE_NAME;

    UPDATE COORDINATES
    SET X = COORDINATES_X,
        Y = COORDINATES_Y
    WHERE COORDINATES.ID = P_COORDINATES_ID;

    UPDATE ADDRESS
    SET STREET   = ADDRESS_STREET,
        ZIP_CODE = ADDRESS_ZIP_CODE
    WHERE ADDRESS.ID = O_ADDRESS_ID;

    UPDATE ORGANIZATION
    SET NAME                 = ORGANIZATION_NAME,
        ANNUAL_TURNOVER      = ORGANIZATION_ANNUAL_TURNOVER,
        ORGANIZATION_TYPE_ID = O_ORGANIZATION_TYPE_ID
    WHERE ORGANIZATION.ID = P_ORGANIZATION_ID;

    UPDATE PRODUCT
    SET NAME               = PRODUCT_NAME,
        PRICE              = PRODUCT_PRICE,
        UNIT_OF_MEASURE_ID = P_UNIT_OF_MEASURE_ID
    WHERE PRODUCT.ID = PRODUCT_ID;

    RETURN PRODUCT_ID;
END;
$$;
